<?php

namespace Kholenkov;

class DataFormattingTest extends \PHPUnit\Framework\TestCase {

	const W1 = 'рубль';
	const W2 = 'рубля';
	const W3 = 'рублей';

	public function testIntToWords1() {
		$data = [
			[null, null, ''],
			[[], null, ''],
			[(new \stdClass()), null, ''],
			[' ', null, ''],
			['abc', null, ''],
			['1-', null, ''],
			// ----
			[0, null, 'ноль'],
			[0., null, 'ноль'],
			[0.0, null, 'ноль'],
			[0.1, null, ''],
			[1, null, 'один'],
			[1., null, 'один'],
			[1.0, null, 'один'],
			[1.1, null, ''],
			[.0, null, 'ноль'],
			[.1, null, ''],
			// ----
			['0', null, 'ноль'],
			['0.', null, ''],
			['0.0', null, ''],
			['0.1', null, ''],
			['1', null, 'один'],
			['1.', null, ''],
			['1.0', null, ''],
			['1.1', null, ''],
			['.0', null, ''],
			['.1', null, ''],
			// ----
			[1, [self::W1], 'один'],
			[1, [self::W1, self::W2], 'один'],
			[1, [1 => self::W1, 2 => self::W2, 3 => self::W3], 'один'],
			['1.1', [self::W1, self::W2, self::W3], '']
		];
		foreach ($data as $i => $test) {
			$this->assertTrue(\Kholenkov\DataFormatting::intToWords($test[0], $test[1]) === $test[2], $i);
		}
	}

	public function testIntToWords2() {
		$data = [
			[0, 'ноль', self::W3],
			[00, 'ноль', self::W3],
			[000, 'ноль', self::W3],
			[0000, 'ноль', self::W3],
			['0', 'ноль', self::W3],
			['00', 'ноль', self::W3],
			['000', 'ноль', self::W3],
			['0000', 'ноль', self::W3],
			// ----
			[1, 'один', self::W1],
			[2, 'два', self::W2],
			[3, 'три', self::W2],
			[4, 'четыре', self::W2],
			[5, 'пять', self::W3],
			[6, 'шесть', self::W3],
			[7, 'семь', self::W3],
			[8, 'восемь', self::W3],
			[9, 'девять', self::W3],
			[10, 'десять', self::W3],
			[11, 'одиннадцать', self::W3],
			[12, 'двенадцать', self::W3],
			[13, 'тринадцать', self::W3],
			[14, 'четырнадцать', self::W3],
			[15, 'пятнадцать', self::W3],
			[16, 'шестнадцать', self::W3],
			[17, 'семнадцать', self::W3],
			[18, 'восемнадцать', self::W3],
			[19, 'девятнадцать', self::W3],
			[20, 'двадцать', self::W3],
			[21, 'двадцать один', self::W1],
			[22, 'двадцать два', self::W2],
			[23, 'двадцать три', self::W2],
			[24, 'двадцать четыре', self::W2],
			[25, 'двадцать пять', self::W3],
			// ----
			[30, 'тридцать', self::W3],
			[40, 'сорок', self::W3],
			[50, 'пятьдесят', self::W3],
			[60, 'шестьдесят', self::W3],
			[70, 'семьдесят', self::W3],
			[80, 'восемьдесят', self::W3],
			[90, 'девяносто', self::W3],
			// ----
			[100, 'сто', self::W3],
			[200, 'двести', self::W3],
			[300, 'триста', self::W3],
			[400, 'четыреста', self::W3],
			[500, 'пятьсот', self::W3],
			[600, 'шестьсот', self::W3],
			[700, 'семьсот', self::W3],
			[800, 'восемьсот', self::W3],
			[900, 'девятьсот', self::W3],
			// ----
			[101, 'сто один', self::W1],
			[102, 'сто два', self::W2],
			[103, 'сто три', self::W2],
			[104, 'сто четыре', self::W2],
			[105, 'сто пять', self::W3],
			[106, 'сто шесть', self::W3],
			[107, 'сто семь', self::W3],
			[108, 'сто восемь', self::W3],
			[109, 'сто девять', self::W3],
			[110, 'сто десять', self::W3],
			[111, 'сто одиннадцать', self::W3],
			[112, 'сто двенадцать', self::W3],
			[113, 'сто тринадцать', self::W3],
			[114, 'сто четырнадцать', self::W3],
			[115, 'сто пятнадцать', self::W3],
			[116, 'сто шестнадцать', self::W3],
			[117, 'сто семнадцать', self::W3],
			[118, 'сто восемнадцать', self::W3],
			[119, 'сто девятнадцать', self::W3],
			[120, 'сто двадцать', self::W3],
			[121, 'сто двадцать один', self::W1],
			[122, 'сто двадцать два', self::W2],
			[123, 'сто двадцать три', self::W2],
			[124, 'сто двадцать четыре', self::W2],
			[125, 'сто двадцать пять', self::W3],
			// ----
			[1101, 'одна тысяча сто один', self::W1],
			[2102, 'две тысячи сто два', self::W2],
			[3103, 'три тысячи сто три', self::W2],
			[4104, 'четыре тысячи сто четыре', self::W2],
			[5105, 'пять тысяч сто пять', self::W3],
			// ----
			[1001101, 'один миллион одна тысяча сто один', self::W1],
			[2002102, 'два миллиона две тысячи сто два', self::W2],
			[3003103, 'три миллиона три тысячи сто три', self::W2],
			[4004104, 'четыре миллиона четыре тысячи сто четыре', self::W2],
			[5005105, 'пять миллионов пять тысяч сто пять', self::W3],
			// ----
			[1001001101, 'один миллиард один миллион одна тысяча сто один', self::W1],
			[2002002102, 'два миллиарда два миллиона две тысячи сто два', self::W2],
			[3003003103, 'три миллиарда три миллиона три тысячи сто три', self::W2],
			[4004004104, 'четыре миллиарда четыре миллиона четыре тысячи сто четыре', self::W2],
			[5005005105, 'пять миллиардов пять миллионов пять тысяч сто пять', self::W3],
			// ----
			['1000000000001', 'один триллион один', self::W1],
			['2000000000002', 'два триллиона два', self::W2],
			['3000000000003', 'три триллиона три', self::W2],
			['4000000000004', 'четыре триллиона четыре', self::W2],
			['5000000000005', 'пять триллионов пять', self::W3],
			// ----
			['1000000000000001', 'один квадриллион один', self::W1],
			['2000000000000002', 'два квадриллиона два', self::W2],
			['3000000000000003', 'три квадриллиона три', self::W2],
			['4000000000000004', 'четыре квадриллиона четыре', self::W2],
			['5000000000000005', 'пять квадриллионов пять', self::W3],
			// ----
			['1000000000000000001', 'один квинтиллион один', self::W1],
			['2000000000000000002', 'два квинтиллиона два', self::W2],
			['3000000000000000003', 'три квинтиллиона три', self::W2],
			['4000000000000000004', 'четыре квинтиллиона четыре', self::W2],
			['5000000000000000005', 'пять квинтиллионов пять', self::W3],
			// ----
			['1000000000000000000001', 'один секстиллион один', self::W1],
			['2000000000000000000002', 'два секстиллиона два', self::W2],
			['3000000000000000000003', 'три секстиллиона три', self::W2],
			['4000000000000000000004', 'четыре секстиллиона четыре', self::W2],
			['5000000000000000000005', 'пять секстиллионов пять', self::W3],
			// ----
			['1000000000000000000000001', 'один септиллион один', self::W1],
			['2000000000000000000000002', 'два септиллиона два', self::W2],
			['3000000000000000000000003', 'три септиллиона три', self::W2],
			['4000000000000000000000004', 'четыре септиллиона четыре', self::W2],
			['5000000000000000000000005', 'пять септиллионов пять', self::W3],
			// ----
			['1000000000000000000000000001', 'один октиллион один', self::W1],
			['2000000000000000000000000002', 'два октиллиона два', self::W2],
			['3000000000000000000000000003', 'три октиллиона три', self::W2],
			['4000000000000000000000000004', 'четыре октиллиона четыре', self::W2],
			['5000000000000000000000000005', 'пять октиллионов пять', self::W3],
			// ----
			['1000000000000000000000000000001', 'один нониллион один', self::W1],
			['2000000000000000000000000000002', 'два нониллиона два', self::W2],
			['3000000000000000000000000000003', 'три нониллиона три', self::W2],
			['4000000000000000000000000000004', 'четыре нониллиона четыре', self::W2],
			['5000000000000000000000000000005', 'пять нониллионов пять', self::W3],
			// ----
			['1000000000000000000000000000000001', 'один дециллион один', self::W1],
			['2000000000000000000000000000000002', 'два дециллиона два', self::W2],
			['3000000000000000000000000000000003', 'три дециллиона три', self::W2],
			['4000000000000000000000000000000004', 'четыре дециллиона четыре', self::W2],
			['5000000000000000000000000000000005', 'пять дециллионов пять', self::W3],
			// ----
			['1000000000000000000000000000000000001', 'один {неизвестно} один', self::W1],
			['2000000000000000000000000000000000002', 'два {неизвестно} два', self::W2],
			['3000000000000000000000000000000000003', 'три {неизвестно} три', self::W2],
			['4000000000000000000000000000000000004', 'четыре {неизвестно} четыре', self::W2],
			['5000000000000000000000000000000000005', 'пять {неизвестно} пять', self::W3]
		];
		foreach ($data as $test) {
			$this->assertTrue(\Kholenkov\DataFormatting::intToWords($test[0], [self::W1, self::W2, self::W3]) === ($test[1] . ' ' . $test[2]), $test[0]);
		}
	}

}
